package example.caojiehang.com.graduationproject.DataDb;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEVICE_DATA".
*/
public class DeviceDataDao extends AbstractDao<DeviceData, Long> {

    public static final String TABLENAME = "DEVICE_DATA";

    /**
     * Properties of entity DeviceData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Glovename = new Property(1, String.class, "glovename", false, "GLOVENAME");
        public final static Property Speed = new Property(2, String.class, "speed", false, "SPEED");
        public final static Property Efficiency = new Property(3, String.class, "efficiency", false, "EFFICIENCY");
        public final static Property ReceiveTime = new Property(4, String.class, "receiveTime", false, "RECEIVE_TIME");
        public final static Property Date = new Property(5, String.class, "Date", false, "DATE");
    }


    public DeviceDataDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVICE_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"GLOVENAME\" TEXT," + // 1: glovename
                "\"SPEED\" TEXT," + // 2: speed
                "\"EFFICIENCY\" TEXT," + // 3: efficiency
                "\"RECEIVE_TIME\" TEXT," + // 4: receiveTime
                "\"DATE\" TEXT);"); // 5: Date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICE_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DeviceData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String glovename = entity.getGlovename();
        if (glovename != null) {
            stmt.bindString(2, glovename);
        }
 
        String speed = entity.getSpeed();
        if (speed != null) {
            stmt.bindString(3, speed);
        }
 
        String efficiency = entity.getEfficiency();
        if (efficiency != null) {
            stmt.bindString(4, efficiency);
        }
 
        String receiveTime = entity.getReceiveTime();
        if (receiveTime != null) {
            stmt.bindString(5, receiveTime);
        }
 
        String Date = entity.getDate();
        if (Date != null) {
            stmt.bindString(6, Date);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DeviceData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String glovename = entity.getGlovename();
        if (glovename != null) {
            stmt.bindString(2, glovename);
        }
 
        String speed = entity.getSpeed();
        if (speed != null) {
            stmt.bindString(3, speed);
        }
 
        String efficiency = entity.getEfficiency();
        if (efficiency != null) {
            stmt.bindString(4, efficiency);
        }
 
        String receiveTime = entity.getReceiveTime();
        if (receiveTime != null) {
            stmt.bindString(5, receiveTime);
        }
 
        String Date = entity.getDate();
        if (Date != null) {
            stmt.bindString(6, Date);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DeviceData readEntity(Cursor cursor, int offset) {
        DeviceData entity = new DeviceData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // glovename
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // speed
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // efficiency
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // receiveTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // Date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DeviceData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGlovename(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSpeed(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEfficiency(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setReceiveTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DeviceData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DeviceData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DeviceData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
